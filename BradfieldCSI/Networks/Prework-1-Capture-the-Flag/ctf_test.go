package main

import (
	"bytes"
	"reflect"
	"testing"
)

func TestParseEthernet(t *testing.T) {
	data := []struct {
		data []byte
		want EthernetFrame
	}{
		{
			data: []byte{0xc4, 0xe9, 0x84, 0x87, 0x60, 0x28, 0xa4, 0x5e, 0x60, 0xdf, 0x2e, 0x1b, 0x08, 0x00, 0x45, 0x00,
				0x00, 0x40, 0xd0, 0x03, 0x00, 0x00, 0x40, 0x06, 0x2c, 0xee, 0xc0, 0xa8, 0x00, 0x65, 0xc0, 0x1e,
				0xfc, 0x9a, 0xe7, 0x9f, 0x00, 0x50, 0x5e, 0xab, 0x22, 0x65, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x02,
				0xff, 0xff, 0x58, 0x23, 0x00, 0x00, 0x02, 0x04, 0x05, 0xb4, 0x01, 0x03, 0x03, 0x05, 0x01, 0x01,
				0x08, 0x0a, 0x3a, 0x4d, 0xbd, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00},
			want: EthernetFrame{[]byte{0xc4, 0xe9, 0x84, 0x87, 0x60, 0x28}, []byte{0xa4, 0x5e, 0x60, 0xdf, 0x2e, 0x1b}, []byte{0x08, 0x00}, []byte{},
				[]byte{0x45, 0x00, 0x00, 0x40, 0xd0, 0x03, 0x00, 0x00, 0x40, 0x06, 0x2c, 0xee, 0xc0, 0xa8, 0x00, 0x65, 0xc0, 0x1e,
					0xfc, 0x9a, 0xe7, 0x9f, 0x00, 0x50, 0x5e, 0xab, 0x22, 0x65, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x02,
					0xff, 0xff, 0x58, 0x23, 0x00, 0x00, 0x02, 0x04, 0x05, 0xb4, 0x01, 0x03, 0x03, 0x05, 0x01, 0x01,
					0x08, 0x0a, 0x3a, 0x4d, 0xbd, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00}},
		},
	}

	for _, rawframe := range data {
		got := ParseEthernet(rawframe.data)
		want := rawframe.want
		if !bytes.Equal(got.MACdest, want.MACdest) || !bytes.Equal(got.MACsource, want.MACsource) || !bytes.Equal(got.TPID, want.TPID) || !bytes.Equal(got.TPIDExtended, want.TPIDExtended) {
			t.Errorf("Got %v\n\n, wanted %v", got, want)
		}
	}
}

func TestParseIPv4(t *testing.T) {
	data := []struct {
		data []byte
		want IPv4Packet
	}{
		{
			data: []byte{0x45, 0x00, 0x00, 0x40, 0xd0, 0x03, 0x00, 0x00, 0x40, 0x06, 0x2c, 0xee, 0xc0, 0xa8, 0x00, 0x65, 0xc0, 0x1e,
				0xfc, 0x9a, 0xe7, 0x9f, 0x00, 0x50, 0x5e, 0xab, 0x22, 0x65, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x02,
				0xff, 0xff, 0x58, 0x23, 0x00, 0x00, 0x02, 0x04, 0x05, 0xb4, 0x01, 0x03, 0x03, 0x05, 0x01, 0x01,
				0x08, 0x0a, 0x3a, 0x4d, 0xbd, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00},
			want: IPv4Packet{Version: 0x04, IHL: 0x05, DSCP: 0x00, ECN: 0x00, TotalLen: 0x0040, Id: 0xd003,
				Flags: 0x00, FragmentOffset: 0x0000, TTL: 0x40, Protocol: 0x06, HeaderChecksum: 0x2cee, SourceIP: 0xc0a80065, DestIP: 0xc01efc9a,
				Data: []byte{0xe7, 0x9f, 0x00, 0x50, 0x5e, 0xab, 0x22, 0x65, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x02,
					0xff, 0xff, 0x58, 0x23, 0x00, 0x00, 0x02, 0x04, 0x05, 0xb4, 0x01, 0x03, 0x03, 0x05, 0x01, 0x01,
					0x08, 0x0a, 0x3a, 0x4d, 0xbd, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00}},
		},
	}

	for _, rawpacket := range data {
		got := ParseIPv4(rawpacket.data)
		want := rawpacket.want
		gotData := got.Data
		wantData := want.Data
		got.Data = []byte{}
		want.Data = []byte{}

		if !bytes.Equal(gotData, wantData) {
			t.Errorf("\nGot data %v\n\n, wanted data %v", gotData, wantData)
		}

		if !reflect.DeepEqual(got, want) {
			t.Errorf("\nGot %v\n\n, wanted %v", got, want)
		}
	}
}

func TestParseTCP(t *testing.T) {
	data := []struct {
		data []byte
		want TCPPacket
	}{
		{
			data: []byte{0xe7, 0x9f, 0x00, 0x50, 0x5e, 0xab, 0x22, 0x65, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x02,
				0xff, 0xff, 0x58, 0x23, 0x00, 0x00, 0x02, 0x04, 0x05, 0xb4, 0x01, 0x03, 0x03, 0x05, 0x01, 0x01,
				0x08, 0x0a, 0x3a, 0x4d, 0xbd, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00},
			want: TCPPacket{SourcePort: 0xe79f, DestPort: 0x0050, SequenceNo: 0x5eab2265, AckNo: 0x00000000, DataOffset: 0x0b, Reserved: 0x00,
				Flags: 0x02, WindowSize: 0xffff, Checksum: 0x5823, UrgentPtr: 0x0000,
				Data: []byte{}},
		},
	}

	for _, rawpacket := range data {
		got := ParseTCP(rawpacket.data)
		want := rawpacket.want
		gotData := got.Data
		wantData := want.Data
		got.Data = []byte{}
		want.Data = []byte{}

		if !bytes.Equal(gotData, wantData) {
			t.Errorf("\nGot data %v\n\n, wanted data %v", gotData, wantData)
		}

		if !reflect.DeepEqual(got, want) {
			t.Errorf("\nGot %v\n\n, wanted %v", got, want)
		}
	}
}

func TestParseHTTPMessage(t *testing.T) {
	data := []struct {
		data []byte
		want HTTPMessage
	}{
		{
			data: []byte{0x47, 0x45, 0x54, 0x20, 0x2f, 0x61, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x0d,
				0x0a, 0x48, 0x6f, 0x73, 0x74, 0x3a, 0x20, 0x62, 0x72, 0x61, 0x64, 0x66, 0x69, 0x65, 0x6c, 0x64,
				0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x0d, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65,
				0x6e, 0x74, 0x3a, 0x20, 0x63, 0x75, 0x72, 0x6c, 0x2f, 0x37, 0x2e, 0x34, 0x33, 0x2e, 0x30, 0x0d,
				0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x20, 0x2a, 0x2f, 0x2a, 0x0d, 0x0a, 0x0d, 0x0a},
			want: HTTPMessage{Title: []byte{0x47, 0x45, 0x54, 0x20, 0x2f, 0x61, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31},
				Headers: []byte{0x48, 0x6f, 0x73, 0x74, 0x3a, 0x20, 0x62, 0x72, 0x61, 0x64, 0x66, 0x69, 0x65, 0x6c, 0x64,
					0x63, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x0d, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65,
					0x6e, 0x74, 0x3a, 0x20, 0x63, 0x75, 0x72, 0x6c, 0x2f, 0x37, 0x2e, 0x34, 0x33, 0x2e, 0x30, 0x0d,
					0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x20, 0x2a, 0x2f, 0x2a}, Body: []byte{},
			}},
	}

	for _, rawpacket := range data {
		got := ParseHTTPMessage(rawpacket.data)
		want := rawpacket.want

		if !bytes.Equal(got.Title, want.Title) || !bytes.Equal(got.Headers, want.Headers) || !bytes.Equal(got.Body, want.Body) {
			t.Errorf("\nGot data %v\n\n, wanted data %v", got, want)
		}

	}
}
