package main

import (
	"bytes"
	"testing"
)

func TestParseEthernetFrame(t *testing.T) {
	data := []struct {
		data []byte
		want EthernetFrame
	}{
		{
			data: []byte{0xc4, 0xe9, 0x84, 0x87, 0x60, 0x28, 0xa4, 0x5e, 0x60, 0xdf, 0x2e, 0x1b, 0x08, 0x00, 0x45, 0x00,
				0x00, 0x40, 0xd0, 0x03, 0x00, 0x00, 0x40, 0x06, 0x2c, 0xee, 0xc0, 0xa8, 0x00, 0x65, 0xc0, 0x1e,
				0xfc, 0x9a, 0xe7, 0x9f, 0x00, 0x50, 0x5e, 0xab, 0x22, 0x65, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x02,
				0xff, 0xff, 0x58, 0x23, 0x00, 0x00, 0x02, 0x04, 0x05, 0xb4, 0x01, 0x03, 0x03, 0x05, 0x01, 0x01,
				0x08, 0x0a, 0x3a, 0x4d, 0xbd, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00},
			want: EthernetFrame{[]byte{0xc4, 0xe9, 0x84, 0x87, 0x60, 0x28}, []byte{0xa4, 0x5e, 0x60, 0xdf, 0x2e, 0x1b}, []byte{0x08, 0x00}, []byte{},
				[]byte{0x45, 0x00, 0x00, 0x40, 0xd0, 0x03, 0x00, 0x00, 0x40, 0x06, 0x2c, 0xee, 0xc0, 0xa8, 0x00, 0x65, 0xc0, 0x1e,
					0xfc, 0x9a, 0xe7, 0x9f, 0x00, 0x50, 0x5e, 0xab, 0x22, 0x65, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x02,
					0xff, 0xff, 0x58, 0x23, 0x00, 0x00, 0x02, 0x04, 0x05, 0xb4, 0x01, 0x03, 0x03, 0x05, 0x01, 0x01,
					0x08, 0x0a, 0x3a, 0x4d, 0xbd, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00}},
		},
	}

	for _, rawframe := range data {
		got := ParseEthernetFrame(rawframe.data)
		want := rawframe.want
		if !bytes.Equal(got.MACdest, want.MACdest) || !bytes.Equal(got.MACsource, want.MACsource) || !bytes.Equal(got.TPID, want.TPID) || !bytes.Equal(got.TPIDExtended, want.TPIDExtended) {
			t.Errorf("Got %v\n\n, wanted %v", got, want)
		}
	}

}
